<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- See documentation @ http://mybatis.github.io/mybatis-3/sqlmap-xml.html -->

<mapper namespace="com.hp.uca.expert.autoevent.store.AutoEventDao">
	<resultMap id="autoeventsMap" type="com.hp.uca.expert.autoevent.store.StoredAutoEvent" >
	<result column="timeInMillisecs" property="timeInMilliseconds" />
	<result column="attributeChanges" property="attributeChanges" typeHandler="AutoEventStoredAttributeChangesTypeHandler"/>
	</resultMap>
    
   <update id="createStore" parameterType="com.hp.uca.expert.store.sql.SqlStore">
    	CREATE TABLE 
    		<if test="supportsIfNotExist">
    		IF NOT EXISTS
    		</if>
    		AUTOEVENTS (
    		<choose>
    		<when test="name != null and name.equals('sqlite')">
    			identifier VARCHAR(200)PRIMARY KEY,
    		</when>
    		<when test="name != null and ( name.equals('hsqldb') or name.equals('h2') )">
              	identifier VARCHAR(200) GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    		</when>
    		<otherwise>
    		</otherwise>
    		</choose>
                actionName VARCHAR(100),
				actionId VARCHAR(100),
				service VARCHAR(200),
				correlKey VARCHAR(200),
				timeInMillisecs ${bigInt}, <!-- mapper of autoEventRaisedTime -->
				parameters VARCHAR(5000),
				actionMode VARCHAR(100),
				actionOriginator VARCHAR(100),
				originatorId VARCHAR(100),
				type VARCHAR(100),
				dispatchType VARCHAR(100),
				actionType VARCHAR(100),
				scriptName VARCHAR(100),								
				correlActionList VARCHAR(5000),
				correlActionResult CLOB,
				state VARCHAR(100),
				status VARCHAR(100),				 				
				taskRequest CLOB,				
				taskResponse CLOB,								
				leafNode  VARCHAR(100),
				retry	VARCHAR(100),  
				automationFilter VARCHAR(500),
				actionReference VARCHAR(500),
				latest VARCHAR(50),								
				startTime ${bigInt},
			   	endTime VARCHAR(100),
			   	lastUpdateTime ${bigInt},
			    <choose>
			    	<when test="supportsUnlimitedVarChar">attributeChanges VARCHAR</when>
			    	<otherwise>attributeChanges CLOB</otherwise>
			    </choose>	
			    )
    </update>
    
   
	
	<insert id="storeAutoEvent" parameterType="com.hp.uca.expert.store.mappers.AutoEventCreationMapper">
		INSERT INTO AUTOEVENTS
			(
				actionName,
				actionId,
				service,
				correlKey,
				timeInMillisecs,
				parameters,
				actionMode,
				actionOriginator,
				originatorId,
				type,
				dispatchType,
				scriptName,
				actionType,				
				correlActionList,
				state,				
				status,
				correlActionResult,
				taskRequest,					
				taskResponse,							
				leafNode,
				retry,
				actionReference,							
				automationFilter,	
				latest,			
				startTime,
				lastUpdateTime,
				endTime
			)
		VALUES
			(
			#{autoevent.actionName},
			#{autoevent.actionId},
			#{autoevent.service},
			#{autoevent.correlKey},
			#{timeInMillisecs},
			#{autoevent.parameters},
			#{autoevent.actionMode},
			#{autoevent.actionOriginator},
			#{autoevent.originatorId},
			#{autoevent.type},
			#{autoevent.dispatchType},
			#{autoevent.scriptName},
			#{autoevent.actionType},
			#{autoevent.correlActionList},
			#{autoevent.state},
			#{autoevent.status},
			#{autoevent.correlActionResult},
			#{autoevent.taskRequest},
			#{autoevent.taskResponse},
			#{autoevent.leafNode},		
			#{autoevent.retry},
			#{autoevent.actionReference},
			#{autoevent.automationFilter},
			#{autoevent.latest},
			#{autoevent.startTime},
			#{lastUpdateTime},
			#{autoevent.endTime}
			)
	</insert>
	
	 <delete id="clearAll">
    	DELETE FROM AUTOEVENTS
    </delete>
    
    <delete id="deleteStore">
    	DROP TABLE AUTOEVENTS
    </delete>
    
	<select id="getAllAutoEventsByOriginatorId" resultMap="autoeventsMap" >
		SELECT
			*    	
		FROM
			AUTOEVENTS
		WHERE
			originatorId = #{originatorId}   
	</select>
  	
	<select id="getAutoEventByOriginatorIdForRawresultUpdate" resultMap="autoeventsMap" >
		SELECT
			originatorId, actionId, actionName, status, correlActionResult   	
		FROM
			AUTOEVENTS
		WHERE
			originatorId = #{originatorId}
			AND actionType != 'log_and_exit'    
	</select>
	
	<select id="getAutoEvents" resultMap="autoeventsMap" >
		SELECT
			*    	
		FROM
			AUTOEVENTS
	</select>
	
	
	<select id="getAutoEvent" resultMap="autoeventsMap" >
		SELECT
			*    	
		FROM
			AUTOEVENTS
		WHERE
			identifier = #{identifier}
						
	</select>	
	
	<select id="getNewlyInsertedAutoEvent" resultMap="autoeventsMap" >
		SELECT DISTINCT a1.*
	    	FROM AUTOEVENTS a1
    		WHERE identifier = (SELECT MAX(a2.IDENTIFIER)
    			FROM AUTOEVENTS a2 where ORIGINATORID = #{originatorId} 
			GROUP BY ORIGINATORID)						
	</select>	
	
    <update id="createIndexes">
    	CREATE INDEX IDENT on AUTOEVENTS (identifier);
    	CREATE INDEX TIMES on AUTOEVENTS (startTime, lastUpdateTime)
    </update>
    
    <select id="getAutoEventsMarkedAsDeleted" resultMap="autoeventsMap" >
		SELECT
			*    	
		FROM
			AUTOEVENTS
		WHERE
			state = 'TO_BE_DELETED'
	</select>
	
	<delete id="removeAutoEvent">
		DELETE FROM AUTOEVENTS
		WHERE identifier = #{identifier}
	</delete>

	<delete id="removeAutoEvents">
		DELETE FROM AUTOEVENTS
		WHERE state = 'TO_BE_DELETED'
	</delete>
	
	
	<update id="updateAutoEvent" parameterType="com.hp.uca.expert.autoevent.store.AutoEventAttributeChangesMapper">
		UPDATE AUTOEVENTS SET
		<if test="knownChanges != null">
			<foreach collection="knownChanges.attributeChange" item="item" separator=",">
				${item.name} = #{item.newValue}
			</foreach>
            ,
	    </if>	
	    	 timeInMillisecs = #{timeInMillisecs},
	    	lastUpdateTime = #{lastUpdateTime},
	    	attributeChanges = #{cumulatedChanges,typeHandler=AutoEventStoredAttributeChangesTypeHandler}
		WHERE identifier = #{identifier} 
	</update> 

	<update id="markAutoEventsAsDeleted">
    		UPDATE AUTOEVENTS SET STATE = 'TO_BE_DELETED' 
		WHERE originatorId = #{originatorId}
	</update>
	
	<update id="markForDeletion" parameterType="com.hp.uca.expert.store.mappers.AutoEventDeletionMapper">
		UPDATE AUTOEVENTS SET
			startTime = 0,
			lastUpdateTime = #{deletionTime}
		WHERE identifier = #{identifier}	
	</update>

</mapper>