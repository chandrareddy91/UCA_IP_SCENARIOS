<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- See documentation @ http://mybatis.github.io/mybatis-3/sqlmap-xml.html -->

<mapper namespace="com.hp.uca.expert.alarm.store.AlarmDao">
	<resultMap id="alarmsMap" type="com.hp.uca.expert.alarm.store.StoredAlarm" >
		<result column="timeInMillisecs" property="timeInMilliseconds" />
		<result column="customFields" property="customFields" typeHandler="CustomFieldsTypeHandler"/>
		<result column="attributeChanges" property="attributeChanges" typeHandler="StoredAttributeChangesTypeHandler"/>
	</resultMap>
    
    <update id="createStore" parameterType="com.hp.uca.expert.store.sql.SqlStore">
    	CREATE TABLE 
    		<if test="supportsIfNotExist">
    		IF NOT EXISTS
    		</if>
    		ALARMS (
    		<choose>
    		<when test="name != null and name.equals('sqlite')">
    			ID INTEGER PRIMARY KEY,
    		</when>
    		<when test="name != null and ( name.equals('hsqldb') or name.equals('h2') )">
              	ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    		</when>
    		<otherwise>
    		</otherwise>
    		</choose>
                identifier VARCHAR(200),
                sourceIdentifier VARCHAR(100),
                timeInMillisecs ${bigInt}, <!-- mapper of alarmRaisedTime -->
                targetValuePack VARCHAR(100),
                originatingManagedEntity VARCHAR(300),
                alarmType VARCHAR(30),
                probableCause VARCHAR(100),
                perceivedSeverity VARCHAR(15),
	 			networkState VARCHAR(15),
				operatorState VARCHAR(20),
				problemState VARCHAR(15),
				problemInformation VARCHAR(500),
			    specificProblem VARCHAR(100),
			    additionalInformation VARCHAR(150),
			    <choose>
			    <when test="supportsUnlimitedVarChar">additionalText VARCHAR,</when>
			    <otherwise>additionalText VARCHAR(5000),</otherwise>
			    </choose>
				proposedRepairActions VARCHAR(150),
			    notificationIdentifier VARCHAR(100),
			    correlationNotificationIdentifiers VARCHAR(100),
			    parents VARCHAR(500),
			    children VARCHAR(5000),
			    alarmAdditionalData VARCHAR(500),
			    <choose>
			    <when test="supportsUnlimitedVarChar">customFields VARCHAR,</when>
			    <otherwise>customFields VARCHAR(5000),</otherwise>
			    </choose>
			    insertionTime ${bigInt},
			    lastUpdateTime ${bigInt},
			    <choose>
			    <when test="supportsUnlimitedVarChar">attributeChanges VARCHAR</when>
			    <otherwise>attributeChanges VARCHAR(5000)</otherwise>
			    </choose>
                )
    </update>
    
    <update id="createIndexes">
    	CREATE INDEX IDENT on ALARMS (identifier);
    	CREATE INDEX TIMES on ALARMS (insertionTime, lastUpdateTime)
    </update>
    
    <delete id="clearAll">
    	DELETE FROM ALARMS
    </delete>
    
    <delete id="deleteStore">
    	DROP TABLE ALARMS
    </delete>

	<select id="getAlarms" resultMap="alarmsMap" >
		SELECT
			*    	
		FROM
			ALARMS
		WHERE insertionTime <![CDATA[ <> ]]> 0
		AND (insertionTime >= #{since} OR lastUpdateTime >= #{since})
	</select>
	
	<select id="getAlarmsMarkedAsDeleted" resultMap="alarmsMap" >
		SELECT
			*    	
		FROM
			ALARMS
		WHERE
			insertionTime = 0
	</select>
	
	
	<select id="getAlarm" resultMap="alarmsMap" >
		SELECT
			*    	
		FROM
			ALARMS
		WHERE
			identifier = #{identifier}
			AND 
			insertionTime <![CDATA[ <> ]]> 0			
	</select>
	
	<insert id="storeAlarm" parameterType="AlarmCreationMapper">
		INSERT INTO	ALARMS
			(
			identifier,
			<if test="alarm.sourceIdentifier != null">sourceIdentifier,</if>
			timeInMillisecs,
			<if test="alarm.targetValuePack != null">targetValuePack,</if>
			<if test="alarm.originatingManagedEntity != null">originatingManagedEntity,</if>
			alarmType,
			probableCause,
			perceivedSeverity,
			networkState,
			operatorState,
			problemState,
			<if test="alarm.problemInformation != null">problemInformation,</if>
			<if test="alarm.specificProblem != null">specificProblem,</if>
			<if test="alarm.additionalInformation != null">additionalInformation,</if>
			<if test="alarm.additionalText != null">additionalText,</if>
			<if test="alarm.proposedRepairActions != null">proposedRepairActions,</if>
			<if test="alarm.notificationIdentifier != null">notificationIdentifier,</if>
			<if test="alarm.correlationNotificationIdentifiers != null">correlationNotificationIdentifiers,</if>
			<if test="alarm.parents != null">parents,</if>
			<if test="alarm.children != null">children,</if>
			<if test="alarm.alarmAdditionalData != null">alarmAdditionalData,</if>
			<if test="alarm.customFields != null">customFields,</if>
			insertionTime,
			lastUpdateTime
			)
		VALUES
			(
			#{alarm.identifier},
			<if test="alarm.sourceIdentifier != null">#{alarm.sourceIdentifier},</if>
			#{timeInMillisecs},
			<if test="alarm.targetValuePack != null">#{alarm.targetValuePack},</if>
			<if test="alarm.originatingManagedEntity != null">#{alarm.originatingManagedEntity},</if>
			#{alarm.alarmType},
			#{alarm.probableCause},
			#{alarm.perceivedSeverity},
			#{alarm.networkState},
			#{alarm.operatorState},
			#{alarm.problemState},
			<if test="alarm.problemInformation != null">#{alarm.problemInformation},</if>
			<if test="alarm.specificProblem != null">#{alarm.specificProblem},</if>
			<if test="alarm.additionalInformation != null">#{alarm.additionalInformation},</if>
			<if test="alarm.additionalText != null">#{alarm.additionalText},</if>
			<if test="alarm.proposedRepairActions != null">#{alarm.proposedRepairActions},</if>
			<if test="alarm.notificationIdentifier != null">#{alarm.notificationIdentifier},</if>
			<if test="alarm.correlationNotificationIdentifiers != null">#{alarm.correlationNotificationIdentifiers},</if>
			<if test="alarm.parents != null">#{alarm.parents},</if>
			<if test="alarm.children != null">#{alarm.children},</if>
			<if test="alarm.alarmAdditionalData != null">#{alarm.alarmAdditionalData},</if>
			<if test="alarm.customFields != null">#{alarm.customFields,typeHandler=CustomFieldsTypeHandler},</if>
			#{insertionTime},
			0
			)
	</insert>
	
	<delete id="removeAlarm">
		DELETE FROM ALARMS
		WHERE identifier = #{identifier}
	</delete>
	
	<update id="markForDeletion" parameterType="AlarmDeletionMapper">
		UPDATE ALARMS SET
			insertionTime = 0,
			lastUpdateTime = #{deletionTime}
		WHERE identifier = #{identifier}	
	</update>
	
	<update id="markAllForDeletion">
		UPDATE ALARMS SET
		insertionTime = 0,
		lastUpdateTime = #{deletionTime}
	</update>
		
	<update id="purgeAlarms" parameterType="SqlCondition">
		UPDATE ALARMS SET
			insertionTime = 0
		WHERE 
		    <if test="list != null">
	 			<foreach collection="list" item="item" separator="AND">
	 				${item.column} ${item.operator} #{item.value}
	 			</foreach>
	 			AND
		    </if>
			insertionTime <![CDATA[ <> ]]> 0		
	</update>

	<delete id="removeAlarms">
		DELETE FROM ALARMS
		WHERE 
			insertionTime = 0
	</delete>
	
	<update id="updateAlarm" parameterType="AttributeChangesMapper">
		UPDATE ALARMS SET
		<if test="knownChanges != null">
			<foreach collection="knownChanges.attributeChange" item="item" separator=",">
				${item.name} = #{item.newValue}
			</foreach>
			,
	    </if>		
		<if test="customFields != null">
			customFields = #{customFields,typeHandler=CustomFieldsTypeHandler},
	    </if>
	    	timeInMillisecs = #{timeInMillisecs},
	    	lastUpdateTime = #{lastUpdateTime},
	    	attributeChanges = #{cumulatedChanges,typeHandler=StoredAttributeChangesTypeHandler}
		WHERE identifier = #{identifier}
	</update>
</mapper>