<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- See documentation @ http://mybatis.github.io/mybatis-3/sqlmap-xml.html -->

<mapper namespace="com.hp.uca.expert.state.store.StateDao">
	<resultMap id="eventsMap" type="com.hp.uca.expert.event.store.StoredEvent" >
	</resultMap>
 	<resultMap id="statesMap" type="com.hp.uca.expert.state.store.StoredState" >
	</resultMap>
    
    <update id="createStore" parameterType="com.hp.uca.expert.store.sql.SqlStore">
    	CREATE TABLE 
    		<if test="supportsIfNotExist">
    		IF NOT EXISTS
    		</if>
    		STATES (
    		<choose>
    		<when test="name != null and name.equals('sqlite')">
    			ID INTEGER PRIMARY KEY,
    		</when>
    		<when test="name != null and ( name.equals('hsqldb') or name.equals('h2') )">
              	ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    		</when>
    		<otherwise>
    		</otherwise>
    		</choose>
                identifier VARCHAR(200),
			    insertionTime ${bigInt},
                targetValuePack VARCHAR(100),			    
			    eventClass VARCHAR(100),
			    status VARCHAR(100),
			    dbUniqueIdReference VARCHAR(200),
			    dbType VARCHAR(100),
			    dbId ${bigInt},
			    dbDomain VARCHAR(100),
			    statusOrdinal INTEGER,
			    value FLOAT
                );
    </update>
    
    <update id="createIndexes">
    	CREATE INDEX TIMES on STATES (insertionTime)
    </update>

    <delete id="clearAll">
    	DELETE FROM STATES
    </delete>
    
    <delete id="deleteStore">
    	DROP TABLE STATES
    </delete>

	<select id="getEvents" resultMap="eventsMap" >
		SELECT
			*    	
		FROM
			STATES
		WHERE
			insertionTime > #{since}
	</select>
	
	<select id="getStates" resultMap="statesMap" >
		SELECT
			*    	
		FROM
			STATES
		WHERE
			insertionTime > #{since}
	</select>

	<select id="getEventsMarkedAsDeleted" resultMap="eventsMap" >
		SELECT
			*    	
		FROM
			STATES
		WHERE
			insertionTime = 0
	</select>
	
	
	<select id="getEvent" resultMap="eventsMap" >
		SELECT
			*    	
		FROM
			STATES
		WHERE
			identifier = #{identifier}
			AND 
			insertionTime <![CDATA[ <> ]]> 0
	</select>
	
	<insert id="storeEvent" parameterType="EventCreationMapper">
		INSERT INTO	STATES
			(
			identifier,
			insertionTime,
			<if test="event.targetValuePack != null">targetValuePack,</if>			
			eventClass,
			status,
			dbUniqueIdReference,
			dbType,
			dbId,
			dbDomain,
			statusOrdinal,
			value
			)
		VALUES
			(
			#{event.identifier},
			#{insertionTime},
			<if test="event.targetValuePack != null">#{event.targetValuePack},</if>			
			#{eventClass},
			#{event.status},
			#{event.dbUniqueIdReference},
			#{event.dbType},
			#{event.dbId},
			#{event.dbDomain},
			#{event.statusOrdinal},
			#{event.value}
			)
	</insert>
	
	<delete id="removeEvent">
		DELETE FROM STATES
		WHERE identifier = #{identifier}
	</delete>
	
	<delete id="removeEvents">
		DELETE FROM STATES
		WHERE 
			insertionTime = 0
	</delete>
	
</mapper>